// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
import { getAccountNameFromUrl, getStorageClientContext } from "./utils/utils.common";
import { AnonymousCredential } from "./credentials/AnonymousCredential";
import { isNode } from "@azure/core-http";
import { StorageSharedKeyCredential } from "./credentials/StorageSharedKeyCredential";
/**
 * A StorageClient represents a based client class for {@link QueueServiceClient}, {@link QueueClient} and etc.
 *
 * @export
 * @class StorageClient
 */
var StorageClient = /** @class */ (function () {
    /**
     * Creates an instance of StorageClient.
     * @param {string} url
     * @param {Pipeline} pipeline
     * @memberof StorageClient
     */
    function StorageClient(url, pipeline) {
        this.url = url;
        this.accountName = getAccountNameFromUrl(url);
        this.pipeline = pipeline;
        this.storageClientContext = getStorageClientContext(url, pipeline);
        // Retrieve credential from the pipeline.
        this.credential = new AnonymousCredential();
        for (var _i = 0, _a = this.pipeline.factories; _i < _a.length; _i++) {
            var factory = _a[_i];
            if ((isNode && factory instanceof StorageSharedKeyCredential) ||
                factory instanceof AnonymousCredential) {
                this.credential = factory;
                break;
            }
            else {
                try {
                    var authPolicy = factory.create();
                    if (authPolicy.constructor.name === "BearerTokenAuthenticationPolicy") {
                        this.credential = factory;
                        break;
                    }
                }
                catch (err) { }
            }
        }
    }
    return StorageClient;
}());
export { StorageClient };
//# sourceMappingURL=StorageClient.js.map